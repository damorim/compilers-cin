package walker;

import org.antlr.v4.runtime.tree.TerminalNode;

import autogenerated.visitor.AnnotExpBaseVisitor;
import autogenerated.visitor.AnnotExpParser;
import autogenerated.visitor.AnnotExpParser.EContext;



public class AnnotExpExtendVisitor extends AnnotExpBaseVisitor<Integer> {
	@Override
	public Integer visitS(AnnotExpParser.SContext ctx) { 
		EContext expressionContext = ctx.e( );
		Integer expressionValue = expressionContext.accept(this);
		
		return expressionValue; 
	}
	
	@Override
	public Integer visitMulExp(AnnotExpParser.MulExpContext ctx) { 
		EContext firstExpressionContext = ctx.e(0);
		EContext secondExpressionContext = ctx.e(1);
		Integer firstExpressionValue = firstExpressionContext.accept(this);
		Integer secondExpressionValue = secondExpressionContext.accept(this);
		
		return (firstExpressionValue * secondExpressionValue); 
	}
	
	@Override 
	public Integer visitAddExp(AnnotExpParser.AddExpContext ctx) { 
		EContext firstExpressionContext = ctx.e(0);
		EContext secondExpressionContext = ctx.e(1);
		Integer firstExpressionValue = firstExpressionContext.accept(this);
		Integer secondExpressionValue = secondExpressionContext.accept(this);
		
		return (firstExpressionValue + secondExpressionValue); 
	}
	
	@Override 
	public Integer visitInt(AnnotExpParser.IntContext ctx) { 
		TerminalNode intTerminalNode = ctx.INT( );
		Integer intValue = Integer.parseInt(intTerminalNode.getText( ));
		
		return intValue; 
	}
	
	@Override
	protected Integer aggregateResult(Integer aggregate, Integer nextResult) {
		return (nextResult != null) ? nextResult : aggregate;
	}

}
