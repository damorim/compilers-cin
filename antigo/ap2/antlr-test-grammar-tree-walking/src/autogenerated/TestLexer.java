// Generated from Test.g4 by ANTLR 4.5.3
package autogenerated;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class TestLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, INT=5, ID=6, MUL=7, DIV=8, ADD=9, SUB=10, 
		BLOCKCOMMENT=11, LINECOMMENT=12, WS=13;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "NUMBER", "LETTER", "UNDERLINE", "INT", 
		"ID", "MUL", "DIV", "ADD", "SUB", "BLOCKCOMMENT", "LINECOMMENT", "WS"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "';'", "'='", "'('", "')'", null, null, "'*'", "'/'", "'+'", "'-'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, "INT", "ID", "MUL", "DIV", "ADD", "SUB", 
		"BLOCKCOMMENT", "LINECOMMENT", "WS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public TestLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Test.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\17l\b\1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\3\2\3\2\3"+
		"\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\6\t\63\n\t\r\t\16\t"+
		"\64\3\n\3\n\5\n9\n\n\3\n\3\n\3\n\7\n>\n\n\f\n\16\nA\13\n\3\13\3\13\3\f"+
		"\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\17\7\17O\n\17\f\17\16\17R\13\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\7\20]\n\20\f\20\16\20`\13"+
		"\20\3\20\3\20\3\20\3\20\3\21\6\21g\n\21\r\21\16\21h\3\21\3\21\4P^\2\22"+
		"\3\3\5\4\7\5\t\6\13\2\r\2\17\2\21\7\23\b\25\t\27\n\31\13\33\f\35\r\37"+
		"\16!\17\3\2\5\3\2\62;\4\2C\\c|\5\2\13\f\17\17\"\"p\2\3\3\2\2\2\2\5\3\2"+
		"\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2"+
		"\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2"+
		"\2\2\3#\3\2\2\2\5%\3\2\2\2\7\'\3\2\2\2\t)\3\2\2\2\13+\3\2\2\2\r-\3\2\2"+
		"\2\17/\3\2\2\2\21\62\3\2\2\2\238\3\2\2\2\25B\3\2\2\2\27D\3\2\2\2\31F\3"+
		"\2\2\2\33H\3\2\2\2\35J\3\2\2\2\37X\3\2\2\2!f\3\2\2\2#$\7=\2\2$\4\3\2\2"+
		"\2%&\7?\2\2&\6\3\2\2\2\'(\7*\2\2(\b\3\2\2\2)*\7+\2\2*\n\3\2\2\2+,\t\2"+
		"\2\2,\f\3\2\2\2-.\t\3\2\2.\16\3\2\2\2/\60\7a\2\2\60\20\3\2\2\2\61\63\5"+
		"\13\6\2\62\61\3\2\2\2\63\64\3\2\2\2\64\62\3\2\2\2\64\65\3\2\2\2\65\22"+
		"\3\2\2\2\669\5\17\b\2\679\5\r\7\28\66\3\2\2\28\67\3\2\2\29?\3\2\2\2:>"+
		"\5\17\b\2;>\5\r\7\2<>\5\13\6\2=:\3\2\2\2=;\3\2\2\2=<\3\2\2\2>A\3\2\2\2"+
		"?=\3\2\2\2?@\3\2\2\2@\24\3\2\2\2A?\3\2\2\2BC\7,\2\2C\26\3\2\2\2DE\7\61"+
		"\2\2E\30\3\2\2\2FG\7-\2\2G\32\3\2\2\2HI\7/\2\2I\34\3\2\2\2JK\7\61\2\2"+
		"KL\7,\2\2LP\3\2\2\2MO\13\2\2\2NM\3\2\2\2OR\3\2\2\2PQ\3\2\2\2PN\3\2\2\2"+
		"QS\3\2\2\2RP\3\2\2\2ST\7,\2\2TU\7\61\2\2UV\3\2\2\2VW\b\17\2\2W\36\3\2"+
		"\2\2XY\7\61\2\2YZ\7\61\2\2Z^\3\2\2\2[]\13\2\2\2\\[\3\2\2\2]`\3\2\2\2^"+
		"_\3\2\2\2^\\\3\2\2\2_a\3\2\2\2`^\3\2\2\2ab\7\f\2\2bc\3\2\2\2cd\b\20\2"+
		"\2d \3\2\2\2eg\t\4\2\2fe\3\2\2\2gh\3\2\2\2hf\3\2\2\2hi\3\2\2\2ij\3\2\2"+
		"\2jk\b\21\2\2k\"\3\2\2\2\n\2\648=?P^h\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}